1、类型与变量相关
1.1、 auto
for (auto i: V) {}
1.2、 字符串和数字转换
to_string    stoi、stol、stoul、stoll、stoull、stof、stod、stold
1.3、 生成随机数
std::random_device rd; 
int randint = rd();
1.4、 原子变量
std::atomic<int>

2、容器
2.1、tuple元组 和 花括号初始化
using  result = std::tuple<int, char, double>;
result res  {1，'a'，1.0};
return res;
2.2、hash正式进入stl
unordered_map、unordered_set、unordered_multimap、unordered_multiset
2.3、emplace 少调用一次拷贝构造函数
std::map<int, int> myMap;
myMap[1] = 5; myMap.emplace(6666, 9999999);
2.4、shrink_to_fit()
std::vector<int> v{ 1, 2, 3, 4, 5 };
v.push_back(1);
std::cout << "before shrink_to_fit: " << v.capacity() << std::endl;
v.shrink_to_fit();
std::cout << "after shrink_to_fit: " << v.capacity() << std::endl;

3、类
std::move()配合右值引用使用，下面这个例子可以完全减少内存拷贝，内存移动
std::unordered_map<int,std::vector<A> > ltmap;
std::vector<A> aVec = { a,a,a };
ltmap.insert(std::make_pair(0, aVec));
ltmap.emplace(1, std::move(aVec));
继承：子类的虚函数多态实现要加override显式的表明，否则会让人误认为是子类自己的虚函数；
不让子类多态实现的虚函数也要记得加入final；

4、函数式编程
4.1、函数指针
void readcb(std::function<int(int, int)> fun, void* param)

5、动态指针
CppExperience 项目中有更多关于智能指针的示例
关于智能指针有更详细的解释：https://blog.csdn.net/zy19940906/article/details/50470087

6、多线程与互斥同步(互斥锁，条件变量)
std::mutex mtx; // 全局互斥锁.
std::condition_variable cv; // 全局条件变量.
bool ready = false; // 全局标志位.
void do_print_id(int id)
{
	std::unique_lock <std::mutex> lck(mtx);
	while (!ready) // 如果标志位不为 true, 则等待...
		cv.wait(lck); // 当前线程被阻塞, 当全局标志位变为 true 之后,
}
int main()
{
	std::thread threads[10];
	for (int i = 0; i < 10; ++i)
		threads[i] = std::thread(do_print_id, i);

	for (auto& th : threads)
		th.join();

	return 0;
}